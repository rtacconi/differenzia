:javascript
  var columns = new Array();
  <% @tables.each do |table| %>
  	<% table.classify.constantize.columns.each do |column| %>
  		columns.push(new Array('<%= table %>', '<%= column.name %>'));
    <% end %>
  <% end %>
  function mergeTableSelected() {
    var o = $('select#merge_table option:selected');
    $('th select option').remove();
    $('th select').each(function(i, select) {
      select.options.add(new Option());
      $.each(columns, function(j, column) {
        if (o.text() == column[0]) {
          select.options.add(new Option(column[1]));
        }
      });
    });
  }

%p#notice= notice

%p
  %b Original path:
  = @import_table.original_path
  
= form_for :merge do |f|
  %table{ :border => "1", :cellspacing => "1", :cellpadding => "1"}
    %tr
      - 0.upto(@column_index_max) do |column_index|
        %th
          = f.select(column_index, [])
  %label= 'Select a table for merging:'
  = f.select(:table, @tables.collect { |t| [t, t] }, { :include_blank => true }, { :onchange => "mergeTableSelected();" })
  = f.submit "Merge", :disable_with => 'Merging...'
  
%table{:border => "1", :cellspacing => "1", :cellpadding => "1"}
  - 0.upto(@row_index_max) do |row_index| 
    - row = @import_cells.select { |cell| cell.row_index == row_index }
    %tr
      - 0.upto(@column_index_max) do |column_index|
        %td
          = row.select { |cell| cell.column_index == column_index }[0].contents

= link_to 'Edit', edit_import_table_path(@import_table)
\|
= link_to 'Back', import_tables_path
